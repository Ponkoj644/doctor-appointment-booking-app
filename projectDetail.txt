Project Prescripto
==================

Project setup
==============
1. Setp the frontend folder with vite.
2. clear the unnecessary code from App.jsx, index.css, App.css file.
3. install the Tailwind css as per instractions.
4. install the dependencies axios, react-router-dom, react-tostify.
5. run the project.
6. copy all the images into the assets folder.

Folder setup
=============
1. into the src create some folders liked components, pages, context(to manage the user login & other context data).

2. for the page routing i use he react-router-dom support (BrowserRouter). for that import the BrowserRouter from react-router-dom & wrape the App component in the main.jsx file.

3. into the pages folder make some pages
    -   About.jsx
    -   Contact.jsx
    -   Doctors.jsx
    -   Home.jsx
    -   Login.jsx
    -   MyAppointments.jsx
    -   MyProfile.jsx (for user profile)
    -   Appointment.jsx (for doctor Appointment)

4. now set all this page route into the App.jsx file.


Navbar Section
===============

1. First make the navigation menu. for that make a component called Navbar.jsx & import this into the app.jsx just before the routing.

2. Design the Navbar component.

3. define the primary color into the tailwind.config file.

4. navigate the all NavLinks to their path.

4. style the navigation underline (hr). its show under which link is active. 

5. Now style the active class for the underline for the active menu link. go to the index.css file & set the active hr style.

6. Now style the button.

7. now add click functionality in this button that redirect to the login page. for that use the "useNavigate" hook. maek a onclick function on the button. 

8. now working on the user login image with profile details. this will show when user is logged in. 

9. for that make 2 state (useState hook) called 'showMenu' & 'token' and use the logic uppon the button. when token true then show the profile details otherwise show the 'create account' button. 
 
10. Design the profile details div.


Header Section
===============
1. Create a new file called 'Header.jsx' into the components folder & mount the file into the Home page.

2. now design the Header.

3. navigate the "Book appointment" button to the specialist section.

4. now cerate a SpecialityMenu.jsx component into the components folder for the Speciality doctor.

5. intigrate this into the home page.

6. now design the SpecialityMenu for the specialist doctors.


Speciality Menu Section
========================
1. First we take the Specialist doctor data form the assets/assets/specialityData.

2. then utilize the date.

3. Let's first designe the SpecialityMenu component. first create the heading.

4. then map the specialityData in this div into a Link.

5. then design the section header & Link. navigate the link into the '/doctors/speciality' by using a dynamic 'to' property with bactics.

6. after that make the scrollbar hidden by uning the webkit pack into the index file.

7. design the img & p tag.

8. add a onclick function to navigate the page with 'speciality' from first in "all-doctors" page. The next section is Top doctors.


====================
Top Doctors Section
====================

1. Make a new component TopDoctors.jsx file into the components folder for the Top doctor section & connect to home page.

2. Design this component.

3. Make a new tailwind class for the 'grid-cols-auto' into the tailwind config file.

4. create a onclick function into the doctor which to navigate the selected doctor by doctor id. for that use the 'useNavigate()' function with the dynamic navigation to doctor id.  



~~~~~~ App Context ~~~~~~~~~~

5. Here we make AppContext.jsx file into the context folder and create a AppContext variable with the help of createContext hook from react to excess data for our whole application.

6. in the AppContext file create AppContextProvider.  function. into this function create a variable called 'value' which is contain the doctor object.

7. now add the context support in our project. for that we use the AppContextProvider in to the main.jsx file. first import the AppContextProvider. then after the BrowserRouter make the AppContextProvider & move the App into this.

8. now go to the TopDoctors, delete the doctor inports from the assets. import the AppContext function from the context/AppContext.

9. just below the useNavigate function i use the useContext function for destructure the doctor object.

10. now go to the More button & add a onclick function to navigate to the all-doctors page.


~~~~~~ Smooth scrolling ~~~~~~~~~~

11. for the smooth scrolling go to the index.html and add a class called "scroll-smooth" into the html element.

12. Now i make the next section called banner.


====================
Top Banner Section
====================

1. For that make a new component called Banner.jsx and import this component into the Home page.

2. This section has 2 parts called left and right side. this section is similer to the header section.

3. Now style this component.

4. Now create the button onclick function to navigate into the login page. here i again se the useNavigate() function.

5. After that i will create next section called  footer section.


===============
Footer Section
===============

1. Create a new component into the component folder called Footer.jsx & intigrate into the App.jsx file.

2. Design the component.



~~~~~~ Change the font ~~~~~~~~~~
1. go to the google font and search the font 'Outfit' for our application.

2. copy the import font link and paste it into the index.css file.

3. in this file make the whole the application font to the Outfit.


==================
All doctors pages
==================

1. first logic is when we click on the any specialist doctor from the home page, it will redirect to the all doctors page with the speciality. when we click on the all doctor navigation menu it will redirect to the doctors path.

2. Open the Doctors.jsx file & here we use the spesiality parameter & useParams hook to get the specialist doctors information. and check spesiality to the console.

3. Now get the all doctors information by using useContext hook with the AppContext.

3. After that design the all doctors UI left side menu & right side Doctors card.


4. For the doctors card we make a state variable liked  const [filterDoc, setFilterDoc]= useState([]).

5. we will display the doctors using this array of state variables.

6. import the AppContext. get the doctor array from the AppContext using useContext hook.

7. Now map the filterDoc into the right side to make a doctors card section.

8. now we set the doctors according to the speciality.

9. For that make a arrow function called applyFilter. Here we use our all filter logic.

    
  const applyFilter = () => {
    if (speciality) {
      setFilterDoc(doctors.filter((doc) => doc.speciality === speciality));
    } else {
      setFilterDoc(doctors);
    }
  };


10. by this function  we check if specialityis present then "setFilterDoc" filter the doctors according the clicked any 'speciality' by using the 'doc' parameter. Otherwise show the all doctors.


11. make a useEffect() hook depending on 'doctors' & 'speciality' to track the speciality Changes.

    useEffect(() => {
        applyFilter();
    }, [doctors, speciality]);

12. put the applyFilter() function into the useEffect.

13. now it show all the available doctors in our doctors array in our webpage.

14. Now when i click any specialist doctor group from the home page "speciality", then redirect to the '/doctors/:speciality' page with filter the doctors that matching the speciality.

15. and when i click the alldoctors navmenu its redirect to the doctors page with the list of available doctor.

16. now design the doctors card. in the right side div.

17. now place the 2 side div in the beside. then design the left side div. then design p tag with dynamic class name.

18. now add a onclick function on every p tag. this is an arrow function & into this function we check, if the 'speciality' is an empty string then show all doctors, otherwise filter the doctor depending on 'specialist' selection.

19. After all the p tag class name add a ternary oparator to match the 'specialist' then show the bg color otherwise it dont show the bg color. and the doctors page is ready.

20. After that we start to design the appointment page.


===============================
Appointment page (what we make)
===============================
1. firstly when we click on a doctor it redirect to the appointment page with the doctor id.

2. we get the doctor id in the appointment page and in this page we show the -->

  -> Display the Doctor details
  -> Display the booking slots
      -> Next 7 days
      -> Timing
  -> Display the Related doctors


===============================
Appointment page (how to make)
===============================

1. first we get the docId from the url by the useParams() in the Appointment.jsx file.

  const { docId } = useParams();

  N/B: use the same name docId and the path is (<Route path="/appointment/:docId" element={<Appointment />} />)

2. get the doctor details from AppContext by the useContext(). now we have the docId & doctor details.

  const { doctors } = useContext(AppContext);

3. now create a state variable which is srore the doctor information.

  const [docInfo, setDocInfo] = useState(null);

4. Now make a async arrow function named 'fetchDocinfo'. within this function make a variable (docInfo) for store the doctor detail by filter the doctor array by 'doc' parameter, which is matched to the doctor id & we get the docId from the url.

  const fetchDocinfo = async () => {
    const docInfo = doctors.filter((doc) => doc._id === docId);
    setDocInfo(docInfo);
    console.log(docInfo);
  };


5. into the function after filter set the  setDocInfo(docInfo). chec the data console.log(docInfo). 

6. Now make a useEffect arrow function depending on the 'doctors' & 'docId'. its tract any change this both. put the fetchDocinfo() into this.

  useEffect(() => {
    fetchDocinfo()
  }, [doctors, docId]);

7. After geating the data starting the page design.

8. into return div check if 'docInfo' is available in that case show the doctor information div.

9. in the Appointment fees we use the currency symbol ($). we use this symbol many more places in our application. so we make variable called currencySymbol into the AppContext.

9. inport the currencySymbol & use this before the span.

10. after complete the this section we will start the booking slot section.


~~~~~~ Booking slot section (how to make) ~~~~~~~~~~

1. get the seven days data from the current date & time from the current time.

2.  we create some states variables to store the data, then we'll calculate the data.

3. First state variable for the doctor slot. 

  // Doctor slots //

  const [docSlots, setDocSlots]= useState([]);

4. 2nd state variable for the slot index & initialize from 0.

  const [slotIndex, setSlotIndex]= useState(0);

5. 3rd state variable for the slot time & initialize from "". where we store the slot data. 

6. for calculat the slot data, we make a async func called 'getAvailableSlots'. When docInfo is changed, then exicute this function.

  const getAvailableSlots = async()=>{

  }
7. Create another useEffect on the docInfo dependency. when it change, then exicute 'getAvailableSlots' function. 

    useEffect(() => {
    getAvailableSlots();
  }, [docInfo]);

8. now create the logic into the 'getAvailableSlots' function  to calculate the available slots for the particular doctor.

9. in this function, first we clear the previous slots. for that initialize setDocSlots with a empty array.

  // get the doctor slots
  const getAvailableSlots = async () => {
  setDocSlots([]);

  };

10. after that getting the current date by the Date() constractor using the 'today' variable.

11. create a  for loop to get the 7 days. 

12. create a useEffect for the docSlots with docSlots dependency.

13. Now make a 'daysOfWeek' for the date name.
  const daysOfWeek = ["SAT", " SUN", "MON", "TUE", "WED", "THU", "FRI"];

13. Now make the booking slots UI using this data in the Schedule section.

14. after complete this start to make the related Doctor section.


~~~~~~ Listing Related Doctors section (how to make) ~~~~~~~~~~
1. make a new component called "RelatedDoctor" & mount it to the appointment page just below the booing slot section & passing 2 props liked docId & speciality.

2. into the RelatedDoctor file we get the all doctors from the context file.

3. now make a empty state to store the doctors data using relDoc variable and the setter function is setRelDoc.

4. now receive and destructure the props from the appointment page. noe using this props we will filter the related doctor & store them into the relDoc. for that we use a useEffect hook with the dependencies of the doctors, speciality and docId. if any of this in this 3 then exicute the function.

5. into this function we will ckeck if doctor length > 0  & specialist is present then filter the doctors a & get individual similer doctors with same speciality by 'doc' variable & store the filtered data into a temporary variable called ' doctorsData'. and we not show the selected into the list.

6. now save this data into the set state variable (setRelDoc). 

7. now we have the relDoc array with the related doctor informatiom. now we use this array & design our section.

8. here we use the similar design like top doctors. simply copy that and paste it here.

9. change slice the Doctors from 'relDoc' & show 5 doctors & after click on a doctor use scroll function to navigate the site to the top.

10. After that we will start to make the Abot Us page.

=============================
About Us page (what we make)
=============================

1. go to the About.jsx file & start the design. 

2. first we make the heading. after that we will make a section for the image & the text. then design the section.

3. after that we will design the "why choose user" section & complete the section. after that we will start to design the "Contact Us" page.


=============================
Contact page (what we make)
=============================

1. go to the Contact.jsx file & start the design. 

2. first we make the heading. after that we will make a section for the image & the text. then design the section.

3. Now all navigation pages are ready to go. Then we start to design the Login page.


=============================
Login page (what we make)
=============================
1.go to the Login.jsx file & start the design. 










































































Git Repository: https://github.com/Ponkoj644/doctor-appointment-booking-app.git






Link : https://www.youtube.com/watch?v=C3U1RforbH4&t=799s

time: 2.54.36 [in the download video]